create table countries
(
    id   INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(40) NOT NULL UNIQUE

);

create table cities
(
    id         INT PRIMARY KEY AUTO_INCREMENT,
    name       VARCHAR(40) NOT NULL UNIQUE,
    population INT,
    country_id INT         NOT NULL,
    FOREIGN KEY (country_id) REFERENCES countries (id)
);

create table universities
(
    id              INT PRIMARY KEY AUTO_INCREMENT,
    name            VARCHAR(60)    NOT NULL UNIQUE,
    address         VARCHAR(80)    NOT NULL UNIQUE,
    tuition_fee     DECIMAL(19, 2) NOT NULL,
    number_of_staff INT,
    city_id         INT,
    FOREIGN KEY (city_id) REFERENCES cities (id)
);

create table students
(
    id           INT PRIMARY KEY AUTO_INCREMENT,
    first_name   VARCHAR(40)  NOT NULL,
    last_name    VARCHAR(40)  NOT NULL,
    age          INT,
    phone        VARCHAR(20)  NOT NULL UNIQUE,
    email        VARCHAR(255) NOT NULL UNIQUE,
    is_graduated TINYINT(1)   NOT NULL,
    city_id INT,
    FOREIGN KEY (city_id) REFERENCES cities(id)

);

create table courses
(
    id             INT PRIMARY KEY AUTO_INCREMENT,
    name           VARCHAR(40) NOT NULL UNIQUE,
    duration_hours DECIMAL(19, 2),
    start_date     DATE,
    teacher_name   VARCHAR(60) NOT NULL UNIQUE,
    description    TEXT,
    university_id  INT,
    FOREIGN KEY (university_id) REFERENCES universities (id)
);

create table students_courses
(
    grade      DECIMAL(19, 2),
    student_id INT NOT NULL,
    course_id  INT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES students (id),
    FOREIGN KEY (course_id) REFERENCES courses (id)
);
-- 2

INSERT INTO courses
(name, duration_hours, start_date, teacher_name, description, university_id)
SELECT
    CONCAT(teacher_name, ' ', 'course') AS name,
    CHAR_LENGTH(name)  / 10 AS duration_hours,
    DATE_ADD(start_date, INTERVAL 5 DAY) AS start_date,
    REVERSE(teacher_name) AS teacher_name,
    CONCAT('Course ', teacher_name, REVERSE(description)) AS description,
    DAY(start_date) AS university_id
FROM
    courses
WHERE
    id <= 5;

-- 3
UPDATE universities
SET tuition_fee=tuition_fee+300
where id>=5 AND id<=12;

-- 4

DELETE FROM universities WHERE number_of_staff IS NULL;

-- 5
SELECT id,
       name,
       population,
       country_id
FROM cities
ORDER BY population DESC ;

-- 6

SELECT   first_name, last_name, age, phone, email
FROM students
WHERE age>= 21
ORDER BY first_name DESC , email ASC , id ASC
LIMIT 10;

-- 7

SELECT
    concat_ws(' ',s.first_name, s.last_name)AS 	full_name,
    SUBSTRING(s.email, 2, 10) AS username,
    REVERSE(s.phone) AS password
FROM students s
         LEFT JOIN  students_courses sc on s.id = sc.student_id
where sc.course_id IS NULL
ORDER BY password DESC;

-- 8

select count(s.id) AS student_count,
       u.name      AS university_name

FROM students s

         JOIN students_courses sc on s.id = sc.student_id
         JOIN courses c on sc.course_id = c.id
         JOIN universities u on u.id = c.university_id
GROUP BY u.name
HAVING count(s.id)>=8
ORDER BY  count(s.id) DESC,
          u.name DESC;

-- 9
select u.name AS university_name,
       c.name AS city_name,
       u.address as addrress,
       CASE
           WHEN u.tuition_fee <800  THEN 'cheap'
           WHEN u.tuition_fee <1200  THEN 'normal'
           WHEN u.tuition_fee <2500  THEN 'high'
           ELSE 'expensive'
           END AS tuition_category,
       u.tuition_fee as tuition_fee

FROM universities u
         JOIN cities c on c.id = u.city_id
ORDER BY u.tuition_fee ASC;

-- 10

DELIMITER $$
CREATE FUNCTION udf_average_alumni_grade_by_course_name(course_name VARCHAR(60))
    RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE avg_grade DECIMAL(10, 2);

    SELECT AVG(sc.grade) INTO avg_grade
    FROM students_courses sc
             JOIN courses c ON sc.course_id = c.id
             JOIN students s ON sc.student_id = s.id
    WHERE c.name = course_name AND s.is_graduated = TRUE;

    RETURN avg_grade;
END $$;

-- 11

    DELIMITER $$

CREATE PROCEDURE udp_graduate_all_students_by_year(IN year_started INT)
BEGIN
UPDATE students
SET is_graduated = TRUE
WHERE id IN (
    SELECT sc.student_id
    FROM students_courses sc
             JOIN courses c ON sc.course_id = c.id
    WHERE YEAR(c.start_date) = year_started
);
END $$;